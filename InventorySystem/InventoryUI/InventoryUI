using JetBrains.Annotations;
using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using static InventoryUI;

public class InventoryUI : MonoBehaviour
{

    [Header("Data", order = 1)]
    [SerializeField] List<SlotUI> slotUIs = new List<SlotUI>();
    [Range(1, 64, order = 2)]
    public int size = 1;

    [Header("References", order = 3)]
    [SerializeField] Inventory inventory;
    [SerializeField] GameObject slotPrefab;
    [SerializeField] Transform slotHolder;
    
    //event
    public delegate void OnChange();
    public OnChange onChange;

    void Start()
    {
        onChange += UpdateInventory;
        inventory.onItemChanged += UpdateUI;

        if(slotUIs.Count == 0)
        {
            for (int i = 0; i < size; i++)
            {
                SlotUI slot = Instantiate(slotPrefab, slotHolder).GetComponent<SlotUI>();
                slotUIs.Add(slot);
                slot.parent = this;
            }
        }

        if (inventory != null)
        {
            for (int i = 0; i < slotUIs.Count; i++)
            {
                Debug.Log("Setting ui");
                slotUIs[i].UpdateUI(inventory.items[i]);
                slotUIs[i].parent = this;
            }
        }
        else
        {
            for (int i = 0; i < slotUIs.Count; i++)
            {
                Debug.Log("Setting ui");
                slotUIs[i].UpdateUI(null);
                slotUIs[i].parent = this;
            }
        }

    }

    public void ConnectI(Inventory inventory)
    {
        this.inventory = inventory;
        UpdateUI();
    }
    public void DisconnectI()
    {
        this.inventory = null;
        for (int i = 0; i < slotUIs.Count; i++)
        {
            slotUIs[i].UpdateUI(null);
        }
    }
    public void UpdateUI()
    {
        for (int i = 0; i < slotUIs.Count; i++)
        {
             Slot slot = inventory.items[i];
             slotUIs[i].UpdateUI(slot);            
        }
    }
    public void Inventory()
    {
        int difference = slotUIs.Count - inventory.items.Count;
        if (difference > 0)
        {
            for (int i = 0; i < difference; i++)
            {
                inventory.items.Add(new Slot(null));
            }
        }
        for (int i = 0; i < inventory.items.Count; i++)
        {
            UpdateUI();
        }
        inventory.onItemChanged.Invoke();
    }

    public void UpdateInventory()
    {
        if (inventory != null) {
            for (int i = 0; i < slotUIs.Count; i++)
            {
                inventory.items[i] = slotUIs[i].slot;
            }
            UpdateUI();
        }
        inventory.onItemChanged.Invoke();

    }

    public void AddItem(Slot slot)
    {
        inventory.Add(slot.item, slot.count);
        UpdateUI();
    }
    public void Enable(bool t)
    {
        slotHolder.gameObject.SetActive(t);
    }
}
